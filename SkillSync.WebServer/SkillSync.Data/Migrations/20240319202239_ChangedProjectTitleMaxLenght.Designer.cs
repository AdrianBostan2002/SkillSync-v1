// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillSync.DataAccess;

#nullable disable

namespace SkillSync.DataAccess.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240319202239_ChangedProjectTitleMaxLenght")]
    partial class ChangedProjectTitleMaxLenght
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Freelancer",
                            NormalizedName = "FREELANCER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "SkillScout",
                            NormalizedName = "SKILLSCOUT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ddb34bfe-616a-46a0-af02-b7f29ee25daa",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkillSync.Domain.Models.DropdownOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementValue")
                        .HasColumnType("int");

                    b.Property<int>("LowerInterval")
                        .HasColumnType("int");

                    b.Property<int>("UpperInterval")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DropdownOption");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1127ea0f-54ff-41d1-9356-0a28b9e8e64c"),
                            IncrementValue = 1,
                            LowerInterval = 1,
                            UpperInterval = 10
                        },
                        new
                        {
                            Id = new Guid("a77d1c62-b5cd-4a58-b118-a204381a297e"),
                            IncrementValue = 1,
                            LowerInterval = 1,
                            UpperInterval = 50
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DropdownOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DropdownOptionId");

                    b.ToTable("Feature");

                    b.HasData(
                        new
                        {
                            Id = new Guid("609333f1-4e90-4e41-8b35-7ff12e4167a2"),
                            InputType = 0,
                            Name = "Functional website"
                        },
                        new
                        {
                            Id = new Guid("d040306c-24dd-49aa-ae4d-e0fb95842978"),
                            DropdownOptionId = new Guid("8a4b9c88-1f53-4ab9-9052-f8594d732430"),
                            InputType = 1,
                            Name = "Number of pages"
                        },
                        new
                        {
                            Id = new Guid("a3e7ba6d-6a3d-4bcc-b56f-53b810ad95e1"),
                            InputType = 0,
                            Name = "Responsive design"
                        },
                        new
                        {
                            Id = new Guid("1a8699cd-3f89-46c5-880a-2e36796aeacc"),
                            InputType = 0,
                            Name = "Content upload"
                        },
                        new
                        {
                            Id = new Guid("e0e881ab-bd31-4078-9efa-df6c56aced16"),
                            DropdownOptionId = new Guid("8a4b9c88-1f53-4ab9-9052-f8594d732430"),
                            InputType = 1,
                            Name = "Plugins/extensions "
                        },
                        new
                        {
                            Id = new Guid("043b9933-6280-4f23-9078-6c0a6ef70ef2"),
                            InputType = 0,
                            Name = "E-commerce functionality"
                        },
                        new
                        {
                            Id = new Guid("a9b1b13e-dc2c-41d7-99f0-ae38bc2ef419"),
                            DropdownOptionId = new Guid("e0046a44-904f-4124-8728-298394557fb6"),
                            InputType = 1,
                            Name = "Number of products"
                        },
                        new
                        {
                            Id = new Guid("823c2ba6-754b-44b0-93ae-047785704f32"),
                            InputType = 0,
                            Name = "Payment processing"
                        },
                        new
                        {
                            Id = new Guid("edd4081e-ed6d-468c-8dd7-ae80ebd5d9bf"),
                            InputType = 0,
                            Name = "Opt-in form"
                        },
                        new
                        {
                            Id = new Guid("0c2a2958-d312-4660-a88a-68e8464f5a7c"),
                            InputType = 0,
                            Name = "Autoresponder"
                        },
                        new
                        {
                            Id = new Guid("d49ae00b-3000-4502-82aa-da1328b9bafc"),
                            InputType = 0,
                            Name = "Speed optimization"
                        },
                        new
                        {
                            Id = new Guid("b5f8b6f3-a6e4-40c1-8548-98e791f3a7ad"),
                            InputType = 0,
                            Name = "Hosting setup"
                        },
                        new
                        {
                            Id = new Guid("e8c54c33-73fc-41d8-88a8-70ecb380423f"),
                            InputType = 0,
                            Name = "Social media"
                        },
                        new
                        {
                            Id = new Guid("cde51f64-4da8-4b7c-9827-12246d5cbaa7"),
                            InputType = 1,
                            Name = "Revisions"
                        },
                        new
                        {
                            Id = new Guid("d4e754ae-45ee-46a1-9c09-b2aa0275306a"),
                            InputType = 2,
                            Name = "Price"
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasCompletedExperienceInformations")
                        .HasColumnType("bit");

                    b.Property<string>("ScopeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Freelancer");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.FreelancerSkills", b =>
                {
                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.HasKey("FreelancerId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("FreelancerSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasPackages")
                        .HasColumnType("bit");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("SkillId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDocument");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFeature", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicSelectedValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PremiumSelectedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardSelectedValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ProjectFeature");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFrequentlyAskedQuestion");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPicture");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectVideo");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SkillSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillSubcategoryId");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fd846cd5-0147-4d63-8fda-91d811d0ab38"),
                            Description = "Skills related to designing and developing websites for business purposes.",
                            Name = "Business Websites",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("c1f27d69-c694-47c4-aa55-b0f3643d8261"),
                            Description = "Involves creating online stores and platforms for e-commerce activities.",
                            Name = "E-Commerce Development",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("8ee8b0c3-27a4-412e-95f3-259c2f0142ac"),
                            Description = "Skills in designing and building effective landing pages for websites.",
                            Name = "Landing Pages",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("aeb62221-d5bd-43dc-88b7-fe30f9b0fae0"),
                            Description = "Focuses on creating websites optimized for dropshipping business models.",
                            Name = "Dropshipping Websites",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("dec6f4cd-0a90-4d38-a8d9-483f1f1208e1"),
                            Description = "Encompasses skills required to build fully functional and feature-rich websites.",
                            Name = "Build a Complete Website",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SkillCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf916ff3-eb8c-4cec-baf0-4b4b01940f98"),
                            Description = "This category encompasses skills related to visual design, graphic arts, and creative visual communication.",
                            Name = "Graphics & Design"
                        },
                        new
                        {
                            Id = new Guid("4ac52214-d818-46b2-8da4-e1590920a81b"),
                            Description = "Skills in programming, software development, and technology solutions fall under this category.",
                            Name = "Programming & Tech"
                        },
                        new
                        {
                            Id = new Guid("9943adfd-e4cf-4330-985b-77e74bff6d0e"),
                            Description = "Skills related to online marketing, advertising, and promotion in the digital realm.",
                            Name = "Digital Marketing"
                        },
                        new
                        {
                            Id = new Guid("bd84f14d-46e9-4cf4-bd27-25b5f9f12084"),
                            Description = "This category covers skills in video creation, editing, and animation production.",
                            Name = "Video & Animation"
                        },
                        new
                        {
                            Id = new Guid("8c8bd49c-09e1-4de7-b0ec-8b77533e20ce"),
                            Description = "Skills related to content creation, writing, and translation services.",
                            Name = "Writing & Translation"
                        },
                        new
                        {
                            Id = new Guid("374bdbc7-aa1d-4930-8476-8e08ed248db7"),
                            Description = "Skills in music composition, audio production, and sound engineering.",
                            Name = "Music & Audio"
                        },
                        new
                        {
                            Id = new Guid("8fbfe504-4f25-4dde-8c27-53edf0f68f54"),
                            Description = "Encompasses skills related to business strategy, management, and entrepreneurial activities.",
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("c673ab19-6e9f-4763-86b3-830446947ccb"),
                            Description = "Skills related to data analysis, management, and interpretation.",
                            Name = "Data"
                        },
                        new
                        {
                            Id = new Guid("72afde51-04b0-4d14-9633-ca4dbde50228"),
                            Description = "Skills in capturing and editing visual images through photography.",
                            Name = "Photography"
                        },
                        new
                        {
                            Id = new Guid("0e5d0d72-ee6f-4dcd-a4a7-298793a18a55"),
                            Description = "This category involves skills related to artificial intelligence, machine learning, and AI-based services.",
                            Name = "AI Services"
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategoryFrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillCategoryFrequentlyAskedQuestion");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SkillScout");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScoutFavoriteSkills", b =>
                {
                    b.Property<Guid>("SkillScoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkillScoutId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillScoutFavoriteSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SkillCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillSubcategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("57be7b45-ae6d-40a0-a1c0-6816d42afc26"),
                            Description = "Involves creating and maintaining websites, focusing on design, functionality, and user experience.",
                            Name = "Website Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("a9fb6842-2841-407f-8152-d139ab18cca9"),
                            Description = "Encompasses the creation and maintenance of software applications for various platforms.",
                            Name = "Software Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("539286df-9999-4117-9f6e-e8456f22e0f7"),
                            Description = "Focuses on designing and building applications specifically for mobile devices.",
                            Name = "Mobile App Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("2b5ddf08-fe51-4d09-b02b-96e0e258515a"),
                            Description = "Involves the creation and implementation of artificial intelligence algorithms and systems.",
                            Name = "AI Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("cf166cac-f04c-4d21-b3e7-35b50c570a45"),
                            Description = "Deals with understanding and utilizing various website development platforms and frameworks.",
                            Name = "Website Platforms",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("d55904fb-cf97-49c9-ac49-141ea80f1c5e"),
                            Description = "Professionals specializing in software development, coding, and programming.",
                            Name = "Software Developers",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("6878a3ee-0f17-47d5-b50c-f2690d6934f2"),
                            Description = "Focuses on creating interactive and engaging video games for various platforms.",
                            Name = "Game Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("f0944f78-9173-4d16-8d61-7f64e6afea4f"),
                            Description = "Involves the development and implementation of conversational agents for automated interactions.",
                            Name = "Chatbots",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("320e6a7a-e06f-4e4e-8cae-f40453efd24a"),
                            Description = "Concerned with the ongoing support, updates, and troubleshooting of existing websites.",
                            Name = "Website Maintenance",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("f9755d23-7cf8-49cb-8831-17c7c2b4d0e1"),
                            Description = "Encompasses quality assurance, testing, and review processes to ensure software reliability.",
                            Name = "QA & Review",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("d9810de3-8a34-43e7-828d-23a6067a1786"),
                            Description = "Involves providing support services and addressing cybersecurity concerns for software and systems.",
                            Name = "Support & Cybersecurity",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("67e87bd9-b9cf-4582-99fd-ed4e1b9142d5"),
                            Description = "Includes miscellaneous skills or services related to the broader category of programming and technology.",
                            Name = "Miscellaneous",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategoryFeatureOption", b =>
                {
                    b.Property<Guid>("SkillSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkillSubcategoryId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SkillSubcategoryFeatureOption");

                    b.HasData(
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("885fedc2-0997-47a0-a019-02e8912d60ac")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("6d5ef352-bd44-4fb9-8f69-2bc5f7b35110")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("aabb1612-8c9b-4d29-aac9-529957386d7b")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("0a6ea85a-da41-4cab-917d-60402a960977")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("dd2dda79-ea1a-4c0c-8bde-7304f23d1208")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("fd5c869d-2533-4316-8ee9-78f2eb8dde23")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("462b11f3-caea-46f7-8046-855d54eadc26")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("b9f4986e-33aa-4f2c-bcfe-bdb4f66b6635")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("673ffae4-103d-4380-a4e0-c17087bf0312")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("0f462b41-bb48-42bd-abfa-cb4f72ec1b81")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("fc434379-0b67-4e39-8cf3-d0383ca62571")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("fe16d65c-dbbf-42cf-b416-d1da153094eb")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("3b4c9453-d434-4b82-8d68-e35253006b75")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("3837b73a-b536-4ba0-b22f-f03725b5a39d")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("cada2850-5dfe-43bf-8073-8ead5650f98a")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ddb34bfe-616a-46a0-af02-b7f29ee25daa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83480d82-edc7-40e2-a4dd-448571ed422c",
                            CountryCode = "RO",
                            Email = "bostan.adrian@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Adrian",
                            LastName = "Bostan",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOSTAN.ADRIAN@GMAIL.COM",
                            NormalizedUserName = "BOSTAN.ADRIAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBM3GcPeD52vNtzh6dShlPU1BQT0xvmiQykv9CfPtOgMKrC9sYtnCHSqjSHy+WNLxA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "admin-pf",
                            SecurityStamp = "10c6a5a1-b75c-436d-b78e-126cb20c1de8",
                            TwoFactorEnabled = false,
                            UserName = "bostan.adrian@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Feature", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.DropdownOption", "DropdownOption")
                        .WithMany()
                        .HasForeignKey("DropdownOptionId");

                    b.Navigation("DropdownOption");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.FreelancerSkills", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Freelancer", "Freelancer")
                        .WithMany("FreelancerSkills")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany("Freelancers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectDocument", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFeature", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Features")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFrequentlyAskedQuestion", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("FrequentlyAskedQuestions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectPicture", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Pictures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectVideo", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithOne("Video")
                        .HasForeignKey("SkillSync.Domain.Models.ProjectVideo", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillSubcategory", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategoryFrequentlyAskedQuestion", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillCategory", "SkillCategory")
                        .WithMany("FrequentlyAskedQuestions")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScoutFavoriteSkills", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.SkillScout", "SkillScout")
                        .WithMany("FavoriteSkills")
                        .HasForeignKey("SkillScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillScout");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillCategory", "SkillCategory")
                        .WithMany("SkillSubcategories")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategoryFeatureOption", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.SkillSubcategory", "SkillSubcategory")
                        .WithMany("FeatureOptions")
                        .HasForeignKey("SkillSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("SkillSubcategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.Navigation("FreelancerSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Features");

                    b.Navigation("FrequentlyAskedQuestions");

                    b.Navigation("Pictures");

                    b.Navigation("Video")
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.Navigation("Freelancers");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategory", b =>
                {
                    b.Navigation("FrequentlyAskedQuestions");

                    b.Navigation("SkillSubcategories");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.Navigation("FavoriteSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.Navigation("FeatureOptions");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
