// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillSync.DataAccess;

#nullable disable

namespace SkillSync.DataAccess.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240424210817_AddedNotificationEntity")]
    partial class AddedNotificationEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Freelancer",
                            NormalizedName = "FREELANCER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "SkillScout",
                            NormalizedName = "SKILLSCOUT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ddb34bfe-616a-46a0-af02-b7f29ee25daa",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserChatFirstUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserChatSecondUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserChatFirstUserId", "UserChatSecondUserId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.DropdownOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementValue")
                        .HasColumnType("int");

                    b.Property<int>("LowerInterval")
                        .HasColumnType("int");

                    b.Property<int>("UpperInterval")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DropdownOption");

                    b.HasData(
                        new
                        {
                            Id = new Guid("932801ea-209f-4bf4-a9d9-469e39a4d4ef"),
                            IncrementValue = 1,
                            LowerInterval = 1,
                            UpperInterval = 10
                        },
                        new
                        {
                            Id = new Guid("67d72f87-2b6b-4e70-9682-db9b646c3e69"),
                            IncrementValue = 1,
                            LowerInterval = 1,
                            UpperInterval = 50
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DropdownOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DropdownOptionId");

                    b.ToTable("Feature");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f16650f-f429-4645-ab02-3bd62a71d366"),
                            InputType = 0,
                            Name = "Functional website"
                        },
                        new
                        {
                            Id = new Guid("349a1286-76e7-4fc2-881c-fe3f4caf80ff"),
                            DropdownOptionId = new Guid("8a4b9c88-1f53-4ab9-9052-f8594d732430"),
                            InputType = 1,
                            Name = "Number of pages"
                        },
                        new
                        {
                            Id = new Guid("61c9da45-9cec-4ee6-a103-30716f4a8e22"),
                            InputType = 0,
                            Name = "Responsive design"
                        },
                        new
                        {
                            Id = new Guid("f0f7a950-d552-494a-b8a8-2f691c70fd56"),
                            InputType = 0,
                            Name = "Content upload"
                        },
                        new
                        {
                            Id = new Guid("111a0ec3-9c73-4fe5-8c18-50b91238d6c9"),
                            DropdownOptionId = new Guid("8a4b9c88-1f53-4ab9-9052-f8594d732430"),
                            InputType = 1,
                            Name = "Plugins/extensions "
                        },
                        new
                        {
                            Id = new Guid("d96ff989-2f8a-447f-94bf-644868218107"),
                            InputType = 0,
                            Name = "E-commerce functionality"
                        },
                        new
                        {
                            Id = new Guid("38432333-54fc-448e-aa71-4e9145794290"),
                            DropdownOptionId = new Guid("e0046a44-904f-4124-8728-298394557fb6"),
                            InputType = 1,
                            Name = "Number of products"
                        },
                        new
                        {
                            Id = new Guid("4161d766-5873-4c33-9eed-455ce9b5d929"),
                            InputType = 0,
                            Name = "Payment processing"
                        },
                        new
                        {
                            Id = new Guid("3d67058a-1c33-4ea2-bf22-17371df1ca29"),
                            InputType = 0,
                            Name = "Opt-in form"
                        },
                        new
                        {
                            Id = new Guid("083c6345-040a-4a2d-a5f2-9e9e8d2c25b1"),
                            InputType = 0,
                            Name = "Autoresponder"
                        },
                        new
                        {
                            Id = new Guid("a51180c6-e6bc-4685-99d4-00463136bd51"),
                            InputType = 0,
                            Name = "Speed optimization"
                        },
                        new
                        {
                            Id = new Guid("f2b9de5c-8a5d-4615-80b0-b6b093007591"),
                            InputType = 0,
                            Name = "Hosting setup"
                        },
                        new
                        {
                            Id = new Guid("38d6d3e7-eb94-47a8-8e4b-f5c5e25f76eb"),
                            InputType = 0,
                            Name = "Social media"
                        },
                        new
                        {
                            Id = new Guid("571e7007-2fa4-4852-85cf-83757767169f"),
                            InputType = 1,
                            Name = "Revisions"
                        },
                        new
                        {
                            Id = new Guid("14731b3c-2dc9-4f45-bdfe-7c3f8a6f004d"),
                            InputType = 2,
                            Name = "Price"
                        },
                        new
                        {
                            Id = new Guid("a5837702-9f4d-48e1-bf87-fbf4465b6f07"),
                            DropdownOptionId = new Guid("e0046a44-904f-4124-8728-298394557fb6"),
                            InputType = 1,
                            Name = "Delivery time"
                        },
                        new
                        {
                            Id = new Guid("9d31ac91-2f23-4fb5-9db6-33af7732e0e7"),
                            InputType = 2,
                            Name = "Package name"
                        },
                        new
                        {
                            Id = new Guid("9f009a76-0b77-47a3-b9f1-33087b80d739"),
                            InputType = 2,
                            Name = "Package description"
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasCompletedExperienceInformations")
                        .HasColumnType("bit");

                    b.Property<string>("ScopeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Freelancer");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.FreelancerSkills", b =>
                {
                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.HasKey("FreelancerId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("FreelancerSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SentAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HasPackages")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("SkillId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDocument");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFeature", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicSelectedValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PremiumSelectedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardSelectedValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ProjectFeature");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFrequentlyAskedQuestion");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPicture");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectVideo");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SkillSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillSubcategoryId");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a25caa6a-3327-4b26-a58a-762499422de9"),
                            Description = "Skills related to designing and developing websites for business purposes.",
                            Name = "Business Websites",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("64a09461-f6a0-4939-a82c-e881013c1d56"),
                            Description = "Involves creating online stores and platforms for e-commerce activities.",
                            Name = "E-Commerce Development",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("67e75e7f-3650-4185-89d6-6d8b40047097"),
                            Description = "Skills in designing and building effective landing pages for websites.",
                            Name = "Landing Pages",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("6c3f127e-c595-429c-807e-074833a17427"),
                            Description = "Focuses on creating websites optimized for dropshipping business models.",
                            Name = "Dropshipping Websites",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("eb2ac5d7-02c8-4e89-a84a-2ce701fb7796"),
                            Description = "Encompasses skills required to build fully functional and feature-rich websites.",
                            Name = "Build a Complete Website",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SkillCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("279c68b7-8ff8-48f2-919d-70d85867f667"),
                            Description = "This category encompasses skills related to visual design, graphic arts, and creative visual communication.",
                            Name = "Graphics & Design"
                        },
                        new
                        {
                            Id = new Guid("24137a2b-b51e-49e3-a541-d782a3d10c4f"),
                            Description = "Skills in programming, software development, and technology solutions fall under this category.",
                            Name = "Programming & Tech"
                        },
                        new
                        {
                            Id = new Guid("611d7230-bcf2-4dbc-b6c6-9c428ee128b0"),
                            Description = "Skills related to online marketing, advertising, and promotion in the digital realm.",
                            Name = "Digital Marketing"
                        },
                        new
                        {
                            Id = new Guid("9f23dda1-447b-4151-9c32-1847b03800fb"),
                            Description = "This category covers skills in video creation, editing, and animation production.",
                            Name = "Video & Animation"
                        },
                        new
                        {
                            Id = new Guid("fcb14d52-6e95-4ebc-a862-cd28bacbc86d"),
                            Description = "Skills related to content creation, writing, and translation services.",
                            Name = "Writing & Translation"
                        },
                        new
                        {
                            Id = new Guid("7db5814a-0689-48e6-86a1-e4c8e52ba70e"),
                            Description = "Skills in music composition, audio production, and sound engineering.",
                            Name = "Music & Audio"
                        },
                        new
                        {
                            Id = new Guid("53747475-a312-45ea-9b73-a490466e5ec4"),
                            Description = "Encompasses skills related to business strategy, management, and entrepreneurial activities.",
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("790ff549-a0f0-4294-b476-d96a16079acd"),
                            Description = "Skills related to data analysis, management, and interpretation.",
                            Name = "Data"
                        },
                        new
                        {
                            Id = new Guid("b2b275a5-4e5f-4936-8c79-918aaa98a8cb"),
                            Description = "Skills in capturing and editing visual images through photography.",
                            Name = "Photography"
                        },
                        new
                        {
                            Id = new Guid("9295939b-e9a3-4720-bec5-0983b0e4fbd8"),
                            Description = "This category involves skills related to artificial intelligence, machine learning, and AI-based services.",
                            Name = "AI Services"
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategoryFrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillCategoryFrequentlyAskedQuestion");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SkillScout");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScoutFavoriteSkills", b =>
                {
                    b.Property<Guid>("SkillScoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkillScoutId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillScoutFavoriteSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SkillCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillSubcategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25898e96-1a38-40aa-86c2-36b3fc41b641"),
                            Description = "Involves creating and maintaining websites, focusing on design, functionality, and user experience.",
                            Name = "Website Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("343af1fc-1072-4d4d-bf15-6a43c4d32e7b"),
                            Description = "Encompasses the creation and maintenance of software applications for various platforms.",
                            Name = "Software Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("1d20a6c8-ed40-4136-9225-d3fda08234be"),
                            Description = "Focuses on designing and building applications specifically for mobile devices.",
                            Name = "Mobile App Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("d8404f6d-1576-4f60-a738-0206b7c2089d"),
                            Description = "Involves the creation and implementation of artificial intelligence algorithms and systems.",
                            Name = "AI Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("0113c75f-ca0d-4b8c-8cd9-2186ec7676a7"),
                            Description = "Deals with understanding and utilizing various website development platforms and frameworks.",
                            Name = "Website Platforms",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("da8140d3-9952-414f-8d1e-c44407e81f78"),
                            Description = "Professionals specializing in software development, coding, and programming.",
                            Name = "Software Developers",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("8afb1888-d817-4e40-839a-3e9b0e6091d6"),
                            Description = "Focuses on creating interactive and engaging video games for various platforms.",
                            Name = "Game Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("2bd9a64f-3780-4d7c-8839-15228d794db0"),
                            Description = "Involves the development and implementation of conversational agents for automated interactions.",
                            Name = "Chatbots",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("831ed0fc-b87b-4847-8eb1-861c9fa5d93d"),
                            Description = "Concerned with the ongoing support, updates, and troubleshooting of existing websites.",
                            Name = "Website Maintenance",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("6e400845-6456-485b-9438-ac8c6cc04c87"),
                            Description = "Encompasses quality assurance, testing, and review processes to ensure software reliability.",
                            Name = "QA & Review",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("473f2b4d-7758-4f6e-a9c4-87d651bd78c7"),
                            Description = "Involves providing support services and addressing cybersecurity concerns for software and systems.",
                            Name = "Support & Cybersecurity",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("054e9a6d-86a3-4784-b713-29acc654b080"),
                            Description = "Includes miscellaneous skills or services related to the broader category of programming and technology.",
                            Name = "Miscellaneous",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategoryFeatureOption", b =>
                {
                    b.Property<Guid>("SkillSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkillSubcategoryId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SkillSubcategoryFeatureOption");

                    b.HasData(
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("80e10c56-c46d-45c1-9d65-1930951b4b30")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("0a050394-f7af-483a-9f94-043bc4d959f0")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("d74075a6-7d42-4665-ba2e-bac6d085f944")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ddb34bfe-616a-46a0-af02-b7f29ee25daa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba166c9e-453e-42b1-8b22-060832fb79eb",
                            CountryCode = "RO",
                            Email = "bostan.adrian@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Adrian",
                            LastName = "Bostan",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOSTAN.ADRIAN@GMAIL.COM",
                            NormalizedUserName = "BOSTAN.ADRIAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpCDCk//njVu1thhCUd4fxkHe9MkgBEnyfhUhZGkOlF73pw2SvJIHovRcf31TpQsw==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "admin-pf",
                            SecurityStamp = "c94b5c21-05b1-474a-b6cc-da6493a44ca7",
                            TwoFactorEnabled = false,
                            UserName = "bostan.adrian@gmail.com"
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserChat", b =>
                {
                    b.Property<string>("FirstUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FirstUserId", "SecondUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserFavoriteProject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserFavoriteProject");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserNotification", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ChatMessage", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.UserChat", null)
                        .WithMany("Messages")
                        .HasForeignKey("UserChatFirstUserId", "UserChatSecondUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Feature", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.DropdownOption", "DropdownOption")
                        .WithMany()
                        .HasForeignKey("DropdownOptionId");

                    b.Navigation("DropdownOption");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.FreelancerSkills", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Freelancer", "Freelancer")
                        .WithMany("FreelancerSkills")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany("Freelancers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Notification", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectDocument", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFeature", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Features")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFrequentlyAskedQuestion", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("FrequentlyAskedQuestions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectPicture", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Pictures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectVideo", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithOne("Video")
                        .HasForeignKey("SkillSync.Domain.Models.ProjectVideo", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillSubcategory", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategoryFrequentlyAskedQuestion", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillCategory", "SkillCategory")
                        .WithMany("FrequentlyAskedQuestions")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScoutFavoriteSkills", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.SkillScout", "SkillScout")
                        .WithMany("FavoriteSkills")
                        .HasForeignKey("SkillScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillScout");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillCategory", "SkillCategory")
                        .WithMany("SkillSubcategories")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategoryFeatureOption", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.SkillSubcategory", "SkillSubcategory")
                        .WithMany("FeatureOptions")
                        .HasForeignKey("SkillSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("SkillSubcategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserChat", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "FirstUser")
                        .WithMany()
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserFavoriteProject", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserNotification", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.Navigation("FreelancerSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Features");

                    b.Navigation("FrequentlyAskedQuestions");

                    b.Navigation("Pictures");

                    b.Navigation("Video")
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.Navigation("Freelancers");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategory", b =>
                {
                    b.Navigation("FrequentlyAskedQuestions");

                    b.Navigation("SkillSubcategories");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.Navigation("FavoriteSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.Navigation("FeatureOptions");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserChat", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
