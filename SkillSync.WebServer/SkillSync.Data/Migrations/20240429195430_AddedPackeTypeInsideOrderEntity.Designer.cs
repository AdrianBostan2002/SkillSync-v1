// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SkillSync.DataAccess;

#nullable disable

namespace SkillSync.DataAccess.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240429195430_AddedPackeTypeInsideOrderEntity")]
    partial class AddedPackeTypeInsideOrderEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Freelancer",
                            NormalizedName = "FREELANCER"
                        },
                        new
                        {
                            Id = "3",
                            Name = "SkillScout",
                            NormalizedName = "SKILLSCOUT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ddb34bfe-616a-46a0-af02-b7f29ee25daa",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserChatFirstUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserChatSecondUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("UserChatFirstUserId", "UserChatSecondUserId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.DropdownOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IncrementValue")
                        .HasColumnType("int");

                    b.Property<int>("LowerInterval")
                        .HasColumnType("int");

                    b.Property<int>("UpperInterval")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DropdownOption");

                    b.HasData(
                        new
                        {
                            Id = new Guid("992f2b25-54e9-4503-aafd-96a8ff4a37d9"),
                            IncrementValue = 1,
                            LowerInterval = 1,
                            UpperInterval = 10
                        },
                        new
                        {
                            Id = new Guid("a76dcca8-db70-4044-91db-ef0777e8dbe6"),
                            IncrementValue = 1,
                            LowerInterval = 1,
                            UpperInterval = 50
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DropdownOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DropdownOptionId");

                    b.ToTable("Feature");

                    b.HasData(
                        new
                        {
                            Id = new Guid("869100f6-1068-4c6c-8279-59b3eea19dfd"),
                            InputType = 0,
                            Name = "Functional website"
                        },
                        new
                        {
                            Id = new Guid("6b5a6030-6d5c-4e42-b122-1dfa9860f5f5"),
                            DropdownOptionId = new Guid("8a4b9c88-1f53-4ab9-9052-f8594d732430"),
                            InputType = 1,
                            Name = "Number of pages"
                        },
                        new
                        {
                            Id = new Guid("886abafb-1f31-45ed-94a3-c2559f886a3a"),
                            InputType = 0,
                            Name = "Responsive design"
                        },
                        new
                        {
                            Id = new Guid("8ec3a007-d3aa-4add-8ddd-c1036a55fbb1"),
                            InputType = 0,
                            Name = "Content upload"
                        },
                        new
                        {
                            Id = new Guid("4cf6d76f-ec78-4720-b0c8-6de3bd860c13"),
                            DropdownOptionId = new Guid("8a4b9c88-1f53-4ab9-9052-f8594d732430"),
                            InputType = 1,
                            Name = "Plugins/extensions "
                        },
                        new
                        {
                            Id = new Guid("d6b594de-4d9d-4a5c-8113-1334e6797c6c"),
                            InputType = 0,
                            Name = "E-commerce functionality"
                        },
                        new
                        {
                            Id = new Guid("ade0f4ff-d964-4d7b-b630-d732f100fe96"),
                            DropdownOptionId = new Guid("e0046a44-904f-4124-8728-298394557fb6"),
                            InputType = 1,
                            Name = "Number of products"
                        },
                        new
                        {
                            Id = new Guid("93b42924-b626-48e4-94a1-ec2b1aeae689"),
                            InputType = 0,
                            Name = "Payment processing"
                        },
                        new
                        {
                            Id = new Guid("9d1d88cd-129e-4f40-96df-810f23f199f5"),
                            InputType = 0,
                            Name = "Opt-in form"
                        },
                        new
                        {
                            Id = new Guid("a4e03f04-ec7a-499e-842f-d45aa7443f08"),
                            InputType = 0,
                            Name = "Autoresponder"
                        },
                        new
                        {
                            Id = new Guid("db25089f-a2ac-4ef7-802e-b5ae443945d5"),
                            InputType = 0,
                            Name = "Speed optimization"
                        },
                        new
                        {
                            Id = new Guid("89536c07-aea9-429b-8b89-37343bbd8ea8"),
                            InputType = 0,
                            Name = "Hosting setup"
                        },
                        new
                        {
                            Id = new Guid("568ed8e6-d835-43dd-8ac2-e8a8b18d1592"),
                            InputType = 0,
                            Name = "Social media"
                        },
                        new
                        {
                            Id = new Guid("c1b4b179-822a-49cf-b581-a0fc9f4de232"),
                            InputType = 1,
                            Name = "Revisions"
                        },
                        new
                        {
                            Id = new Guid("cf2ed7e0-255f-40c8-b20d-af312829b3b6"),
                            InputType = 2,
                            Name = "Price"
                        },
                        new
                        {
                            Id = new Guid("f292f4eb-0804-4a04-827a-d1724710b772"),
                            DropdownOptionId = new Guid("e0046a44-904f-4124-8728-298394557fb6"),
                            InputType = 1,
                            Name = "Delivery time"
                        },
                        new
                        {
                            Id = new Guid("4e23d358-b0f8-4dab-b08c-48336c059aef"),
                            InputType = 2,
                            Name = "Package name"
                        },
                        new
                        {
                            Id = new Guid("461e5df7-135c-47f3-8108-981f8644ae9d"),
                            InputType = 2,
                            Name = "Package description"
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasCompletedExperienceInformations")
                        .HasColumnType("bit");

                    b.Property<string>("ScopeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Freelancer");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.FreelancerSkills", b =>
                {
                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.HasKey("FreelancerId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("FreelancerSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("SentAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserNotificationReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserNotificationSenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserNotificationSenderId", "UserNotificationReceiverId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompletedAt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PackageType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UntilTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.OrderContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderContent");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedAt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("HasPackages")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("SkillId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectDocument");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFeature", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BasicSelectedValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PremiumSelectedValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardSelectedValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("ProjectFeature");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFrequentlyAskedQuestion");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectPicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPicture");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.ToTable("ProjectVideo");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SkillSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillSubcategoryId");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39e00de6-fbe5-4740-b328-eac73777b7e6"),
                            Description = "Skills related to designing and developing websites for business purposes.",
                            Name = "Business Websites",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("46a77947-842f-4b87-bc44-043cad058e20"),
                            Description = "Involves creating online stores and platforms for e-commerce activities.",
                            Name = "E-Commerce Development",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("ce016be8-2757-42cf-9ea9-3c40aa4b035b"),
                            Description = "Skills in designing and building effective landing pages for websites.",
                            Name = "Landing Pages",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("04fdc96f-d11b-4b07-847c-d008c0de1778"),
                            Description = "Focuses on creating websites optimized for dropshipping business models.",
                            Name = "Dropshipping Websites",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        },
                        new
                        {
                            Id = new Guid("f30cf60a-2725-4359-9b93-07ee0cfbdb5f"),
                            Description = "Encompasses skills required to build fully functional and feature-rich websites.",
                            Name = "Build a Complete Website",
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SkillCategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a9a48139-8db5-4ee8-8792-55f632d6be0e"),
                            Description = "This category encompasses skills related to visual design, graphic arts, and creative visual communication.",
                            Name = "Graphics & Design"
                        },
                        new
                        {
                            Id = new Guid("8a2d2dc3-eeea-4840-977a-5a8a0cbaf2cb"),
                            Description = "Skills in programming, software development, and technology solutions fall under this category.",
                            Name = "Programming & Tech"
                        },
                        new
                        {
                            Id = new Guid("77685226-d857-487b-bd4b-e10a9d17028e"),
                            Description = "Skills related to online marketing, advertising, and promotion in the digital realm.",
                            Name = "Digital Marketing"
                        },
                        new
                        {
                            Id = new Guid("0d2e719d-6477-4de8-8f10-f5575462da70"),
                            Description = "This category covers skills in video creation, editing, and animation production.",
                            Name = "Video & Animation"
                        },
                        new
                        {
                            Id = new Guid("92305417-89f8-4a3c-a323-15bbc93e6ab1"),
                            Description = "Skills related to content creation, writing, and translation services.",
                            Name = "Writing & Translation"
                        },
                        new
                        {
                            Id = new Guid("51793274-564f-4e27-bbe1-89f296e629a9"),
                            Description = "Skills in music composition, audio production, and sound engineering.",
                            Name = "Music & Audio"
                        },
                        new
                        {
                            Id = new Guid("516f94f9-a31f-4217-b800-c04d67911b70"),
                            Description = "Encompasses skills related to business strategy, management, and entrepreneurial activities.",
                            Name = "Business"
                        },
                        new
                        {
                            Id = new Guid("47b48bb5-6748-4e27-9169-8a6e9ff94741"),
                            Description = "Skills related to data analysis, management, and interpretation.",
                            Name = "Data"
                        },
                        new
                        {
                            Id = new Guid("35637b56-659b-4ef5-a41c-9e1d85e48292"),
                            Description = "Skills in capturing and editing visual images through photography.",
                            Name = "Photography"
                        },
                        new
                        {
                            Id = new Guid("93171946-cbb5-47e1-a5b5-66051028c592"),
                            Description = "This category involves skills related to artificial intelligence, machine learning, and AI-based services.",
                            Name = "AI Services"
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategoryFrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SkillCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillCategoryFrequentlyAskedQuestion");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SkillScout");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScoutFavoriteSkills", b =>
                {
                    b.Property<Guid>("SkillScoutId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkillScoutId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillScoutFavoriteSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SkillCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillCategoryId");

                    b.ToTable("SkillSubcategory");

                    b.HasData(
                        new
                        {
                            Id = new Guid("220c769a-b332-4c7e-a3f6-adef7f483754"),
                            Description = "Involves creating and maintaining websites, focusing on design, functionality, and user experience.",
                            Name = "Website Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("967777df-5016-404c-b379-f42ab2a4a447"),
                            Description = "Encompasses the creation and maintenance of software applications for various platforms.",
                            Name = "Software Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("8411eb73-79a6-4528-ac9a-7ec0275b55e7"),
                            Description = "Focuses on designing and building applications specifically for mobile devices.",
                            Name = "Mobile App Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("300b4e13-699b-4874-a49a-24e357671d5c"),
                            Description = "Involves the creation and implementation of artificial intelligence algorithms and systems.",
                            Name = "AI Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("a063dbcf-29d3-4e1e-9f11-acbf24cdd75f"),
                            Description = "Deals with understanding and utilizing various website development platforms and frameworks.",
                            Name = "Website Platforms",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("8429ca23-fb97-4444-83a6-5b2975718ac9"),
                            Description = "Professionals specializing in software development, coding, and programming.",
                            Name = "Software Developers",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("47416329-d453-45a3-a6d0-47408f38293c"),
                            Description = "Focuses on creating interactive and engaging video games for various platforms.",
                            Name = "Game Development",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("1e41973a-9516-41b3-89b6-ecde3009cfc9"),
                            Description = "Involves the development and implementation of conversational agents for automated interactions.",
                            Name = "Chatbots",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("eb4a6ad9-62ea-41d8-97f5-05da7682173f"),
                            Description = "Concerned with the ongoing support, updates, and troubleshooting of existing websites.",
                            Name = "Website Maintenance",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("881bd687-252f-427b-9084-7b58b8d2e411"),
                            Description = "Encompasses quality assurance, testing, and review processes to ensure software reliability.",
                            Name = "QA & Review",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("56c544de-148f-4b4e-8f94-d699c96e30f1"),
                            Description = "Involves providing support services and addressing cybersecurity concerns for software and systems.",
                            Name = "Support & Cybersecurity",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        },
                        new
                        {
                            Id = new Guid("be2591d3-29af-4d40-8340-97c292858360"),
                            Description = "Includes miscellaneous skills or services related to the broader category of programming and technology.",
                            Name = "Miscellaneous",
                            SkillCategoryId = new Guid("8a3ea6d0-ef9f-4aa4-b779-e3af636ed75e")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategoryFeatureOption", b =>
                {
                    b.Property<Guid>("SkillSubcategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SkillSubcategoryId", "FeatureId");

                    b.HasIndex("FeatureId");

                    b.ToTable("SkillSubcategoryFeatureOption");

                    b.HasData(
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("80e10c56-c46d-45c1-9d65-1930951b4b30")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("0a050394-f7af-483a-9f94-043bc4d959f0")
                        },
                        new
                        {
                            SkillSubcategoryId = new Guid("241bbcfd-c981-4a19-803b-1753ce92643b"),
                            FeatureId = new Guid("d74075a6-7d42-4665-ba2e-bac6d085f944")
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ddb34bfe-616a-46a0-af02-b7f29ee25daa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21d3203d-49e7-4395-a93c-256a6c10a906",
                            CountryCode = "RO",
                            Email = "bostan.adrian@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Adrian",
                            LastName = "Bostan",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOSTAN.ADRIAN@GMAIL.COM",
                            NormalizedUserName = "BOSTAN.ADRIAN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFWydDcdJntXv8CzPbfk5vjBXgdBqNNZq0wTb2rdPcvKKqFcu257wxHxu+Z0+QliIA==",
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "admin-pf",
                            SecurityStamp = "3f4b06d9-1d76-40d7-b60f-50b1364cd6e5",
                            TwoFactorEnabled = false,
                            UserName = "bostan.adrian@gmail.com"
                        });
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserChat", b =>
                {
                    b.Property<string>("FirstUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecondUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FirstUserId", "SecondUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("UserChat");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserFavoriteProject", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("UserFavoriteProject");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserNotification", b =>
                {
                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SenderId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("UserNotification");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ChatMessage", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.UserChat", null)
                        .WithMany("Messages")
                        .HasForeignKey("UserChatFirstUserId", "UserChatSecondUserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Feature", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.DropdownOption", "DropdownOption")
                        .WithMany()
                        .HasForeignKey("DropdownOptionId");

                    b.Navigation("DropdownOption");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.FreelancerSkills", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Freelancer", "Freelancer")
                        .WithMany("FreelancerSkills")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany("Freelancers")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Notification", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.UserNotification", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserNotificationSenderId", "UserNotificationReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Order", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.OrderContent", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Order", "Order")
                        .WithMany("Contents")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Freelancer", "Freelancer")
                        .WithMany()
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectDocument", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Documents")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFeature", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Features")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectFrequentlyAskedQuestion", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("FrequentlyAskedQuestions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectPicture", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany("Pictures")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.ProjectVideo", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithOne("Video")
                        .HasForeignKey("SkillSync.Domain.Models.ProjectVideo", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillSubcategory", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategoryFrequentlyAskedQuestion", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillCategory", "SkillCategory")
                        .WithMany("FrequentlyAskedQuestions")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScoutFavoriteSkills", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.SkillScout", "SkillScout")
                        .WithMany("FavoriteSkills")
                        .HasForeignKey("SkillScoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillScout");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.SkillCategory", "SkillCategory")
                        .WithMany("SkillSubcategories")
                        .HasForeignKey("SkillCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategoryFeatureOption", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.SkillSubcategory", "SkillSubcategory")
                        .WithMany("FeatureOptions")
                        .HasForeignKey("SkillSubcategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("SkillSubcategory");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserChat", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "FirstUser")
                        .WithMany()
                        .HasForeignKey("FirstUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FirstUser");

                    b.Navigation("SecondUser");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserFavoriteProject", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserNotification", b =>
                {
                    b.HasOne("SkillSync.Domain.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SkillSync.Domain.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Freelancer", b =>
                {
                    b.Navigation("FreelancerSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Order", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Project", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Features");

                    b.Navigation("FrequentlyAskedQuestions");

                    b.Navigation("Pictures");

                    b.Navigation("Video")
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSync.Domain.Models.Skill", b =>
                {
                    b.Navigation("Freelancers");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillCategory", b =>
                {
                    b.Navigation("FrequentlyAskedQuestions");

                    b.Navigation("SkillSubcategories");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillScout", b =>
                {
                    b.Navigation("FavoriteSkills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.SkillSubcategory", b =>
                {
                    b.Navigation("FeatureOptions");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SkillSync.Domain.Models.UserNotification", b =>
                {
                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
